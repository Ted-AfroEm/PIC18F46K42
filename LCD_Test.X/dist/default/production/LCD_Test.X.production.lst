

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jul 25 15:53:33 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F46K42
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 2.05
    22                           ; Generated 20/12/2018 GMT
    23                           ; 
    24                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F46K42 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _ANSELD	set	14960
    56  0000                     _TRISD	set	16325
    57  0000                     _RD3	set	130667
    58  0000                     _RD2	set	130666
    59  0000                     _RD7	set	130671
    60  0000                     _RD6	set	130670
    61  0000                     _RD5	set	130669
    62  0000                     _RD4	set	130668
    63                           
    64                           	psect	smallconst
    65  001000                     __psmallconst:
    66                           	opt callstack 0
    67  001000  00                 	db	0
    68  001001                     STR_5:
    69  001001  41                 	db	65	;'A'
    70  001002  66                 	db	102	;'f'
    71  001003  72                 	db	114	;'r'
    72  001004  6F                 	db	111	;'o'
    73  001005  20                 	db	32
    74  001006  45                 	db	69	;'E'
    75  001007  6D                 	db	109	;'m'
    76  001008  62                 	db	98	;'b'
    77  001009  65                 	db	101	;'e'
    78  00100A  64                 	db	100	;'d'
    79  00100B  64                 	db	100	;'d'
    80  00100C  65                 	db	101	;'e'
    81  00100D  64                 	db	100	;'d'
    82  00100E  20                 	db	32
    83  00100F  53                 	db	83	;'S'
    84  001010  6F                 	db	111	;'o'
    85  001011  6C                 	db	108	;'l'
    86  001012  75                 	db	117	;'u'
    87  001013  74                 	db	116	;'t'
    88  001014  69                 	db	105	;'i'
    89  001015  6F                 	db	111	;'o'
    90  001016  6E                 	db	110	;'n'
    91  001017  73                 	db	115	;'s'
    92  001018  00                 	db	0
    93  001019                     STR_2:
    94  001019  42                 	db	66	;'B'
    95  00101A  6C                 	db	108	;'l'
    96  00101B  75                 	db	117	;'u'
    97  00101C  65                 	db	101	;'e'
    98  00101D  4D                 	db	77	;'M'
    99  00101E  6F                 	db	111	;'o'
   100  00101F  6F                 	db	111	;'o'
   101  001020  6E                 	db	110	;'n'
   102  001021  20                 	db	32
   103  001022  49                 	db	73	;'I'
   104  001023  6E                 	db	110	;'n'
   105  001024  74                 	db	116	;'t'
   106  001025  65                 	db	101	;'e'
   107  001026  72                 	db	114	;'r'
   108  001027  6E                 	db	110	;'n'
   109  001028  00                 	db	0
   110  001029                     STR_1:
   111  001029  20                 	db	32
   112  00102A  20                 	db	32
   113  00102B  41                 	db	65	;'A'
   114  00102C  41                 	db	65	;'A'
   115  00102D  53                 	db	83	;'S'
   116  00102E  54                 	db	84	;'T'
   117  00102F  55                 	db	85	;'U'
   118  001030  20                 	db	32
   119  001031  32                 	db	50	;'2'
   120  001032  30                 	db	48	;'0'
   121  001033  31                 	db	49	;'1'
   122  001034  39                 	db	57	;'9'
   123  001035  20                 	db	32
   124  001036  20                 	db	32
   125  001037  00                 	db	0
   126  001038                     STR_3:
   127  001038  44                 	db	68	;'D'
   128  001039  65                 	db	101	;'e'
   129  00103A  76                 	db	118	;'v'
   130  00103B  65                 	db	101	;'e'
   131  00103C  6C                 	db	108	;'l'
   132  00103D  6F                 	db	111	;'o'
   133  00103E  70                 	db	112	;'p'
   134  00103F  65                 	db	101	;'e'
   135  001040  64                 	db	100	;'d'
   136  001041  5F                 	db	95	;'_'
   137  001042  62                 	db	98	;'b'
   138  001043  79                 	db	121	;'y'
   139  001044  3A                 	db	58	;':'
   140  001045  00                 	db	0
   141  001046                     STR_4:
   142  001046  54                 	db	84	;'T'
   143  001047  45                 	db	69	;'E'
   144  001048  44                 	db	68	;'D'
   145  001049  52                 	db	82	;'R'
   146  00104A  4F                 	db	79	;'O'
   147  00104B  53                 	db	83	;'S'
   148  00104C  00                 	db	0
   149                           
   150                           ; #config settings
   151  00104D  00                 	db	0	; dummy byte at the end
   152  0000                     
   153                           	psect	cinit
   154  001362                     __pcinit:
   155                           	opt callstack 0
   156  001362                     start_initialization:
   157                           	opt callstack 0
   158  001362                     __initialization:
   159                           	opt callstack 0
   160  001362                     end_of_initialization:
   161                           	opt callstack 0
   162  001362                     __end_of__initialization:
   163                           	opt callstack 0
   164  001362  0E00               	movlw	low (__Lsmallconst shr (0+16))
   165  001364  6EF8               	movwf	tblptru,c
   166  001366  0E10               	movlw	high __Lsmallconst
   167  001368  6EF7               	movwf	tblptrh,c
   168  00136A  0100               	movlb	0
   169  00136C  EF27  F008         	goto	_main	;jump to C main() function
   170                           
   171                           	psect	cstackCOMRAM
   172  000001                     __pcstackCOMRAM:
   173                           	opt callstack 0
   174  000001                     Lcd_Port@a:
   175                           	opt callstack 0
   176                           
   177                           ; 1 bytes @ 0x0
   178  000001                     	ds	1
   179  000002                     ??_Lcd_Cmd:
   180  000002                     Lcd_Write_Char@temp:
   181                           	opt callstack 0
   182                           
   183                           ; 1 bytes @ 0x1
   184  000002                     	ds	1
   185  000003                     Lcd_Cmd@a:
   186                           	opt callstack 0
   187  000003                     Lcd_Write_Char@y:
   188                           	opt callstack 0
   189                           
   190                           ; 1 bytes @ 0x2
   191  000003                     	ds	1
   192  000004                     ??_Lcd_Init:
   193  000004                     Lcd_Set_Cursor@b:
   194                           	opt callstack 0
   195  000004                     Lcd_Write_Char@a:
   196                           	opt callstack 0
   197                           
   198                           ; 1 bytes @ 0x3
   199  000004                     	ds	1
   200  000005                     Lcd_Set_Cursor@a:
   201                           	opt callstack 0
   202  000005                     Lcd_Write_String@a:
   203                           	opt callstack 0
   204                           
   205                           ; 2 bytes @ 0x4
   206  000005                     	ds	1
   207  000006                     Lcd_Set_Cursor@z:
   208                           	opt callstack 0
   209                           
   210                           ; 1 bytes @ 0x5
   211  000006                     	ds	1
   212  000007                     ??_Lcd_Write_String:
   213  000007                     Lcd_Set_Cursor@y:
   214                           	opt callstack 0
   215                           
   216                           ; 1 bytes @ 0x6
   217  000007                     	ds	1
   218  000008                     Lcd_Set_Cursor@temp:
   219                           	opt callstack 0
   220                           
   221                           ; 1 bytes @ 0x7
   222  000008                     	ds	1
   223  000009                     Lcd_Write_String@i:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x8
   227  000009                     	ds	2
   228  00000B                     ??_main:
   229                           
   230                           ; 1 bytes @ 0xA
   231  00000B                     	ds	2
   232  00000D                     main@a:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0xC
   236  00000D                     	ds	2
   237                           
   238 ;;
   239 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   240 ;;
   241 ;; *************** function _main *****************
   242 ;; Defined at:
   243 ;;		line 27 in file "LCD_test.c"
   244 ;; Parameters:    Size  Location     Type
   245 ;;		None
   246 ;; Auto vars:     Size  Location     Type
   247 ;;  a               2   12[COMRAM] unsigned int 
   248 ;; Return value:  Size  Location     Type
   249 ;;                  2   63[None  ] int 
   250 ;; Registers used:
   251 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   252 ;; Tracked objects:
   253 ;;		On entry : 0/0
   254 ;;		On exit  : 0/0
   255 ;;		Unchanged: 0/0
   256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   260 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   261 ;;Total ram usage:        4 bytes
   262 ;; Hardware stack levels required when called:    3
   263 ;; This function calls:
   264 ;;		_Lcd_Clear
   265 ;;		_Lcd_Init
   266 ;;		_Lcd_Set_Cursor
   267 ;;		_Lcd_Shift_Left
   268 ;;		_Lcd_Shift_Right
   269 ;;		_Lcd_Write_Char
   270 ;;		_Lcd_Write_String
   271 ;; This function is called by:
   272 ;;		Startup code after reset
   273 ;; This function uses a non-reentrant model
   274 ;;
   275                           
   276                           	psect	text0
   277  00104E                     __ptext0:
   278                           	opt callstack 0
   279  00104E                     _main:
   280                           	opt callstack 28
   281                           
   282                           ;LCD_test.c: 29:   unsigned int a;;LCD_test.c: 30:   ANSELD = 0x00;
   283                           
   284                           ;incstack = 0
   285  00104E  0E00               	movlw	0
   286  001050  013A               	movlb	58	; () banked
   287  001052  6F70               	movwf	112,b	;volatile
   288                           
   289                           ;LCD_test.c: 31:   TRISD = 0x00;
   290  001054  0E00               	movlw	0
   291  001056  6EC5               	movwf	16325,c	;volatile
   292                           
   293                           ; BSR set to: 58
   294                           ;LCD_test.c: 33:   Lcd_Init();
   295  001058  ECE6  F008         	call	_Lcd_Init	;wreg free
   296  00105C                     l959:
   297                           
   298                           ;LCD_test.c: 35:   {;LCD_test.c: 36:     _delay((unsigned long)((2000)*(8000000/4000.0))
      +                          );
   299  00105C  0E15               	movlw	21
   300  00105E  6E0C               	movwf	(??_main+1)& (0+255),c
   301  001060  0E4B               	movlw	75
   302  001062  6E0B               	movwf	??_main& (0+255),c
   303  001064  0EBE               	movlw	190
   304  001066                     u157:
   305  001066  2EE8               	decfsz	wreg,f,c
   306  001068  D7FE               	bra	u157
   307  00106A  2E0B               	decfsz	??_main& (0+255),f,c
   308  00106C  D7FC               	bra	u157
   309  00106E  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   310  001070  D7FA               	bra	u157
   311  001072  D000               	nop2	
   312                           
   313                           ;LCD_test.c: 37:     Lcd_Clear();
   314  001074  ECC6  F009         	call	_Lcd_Clear	;wreg free
   315                           
   316                           ;LCD_test.c: 38:     Lcd_Set_Cursor(1,1);
   317  001078  0E01               	movlw	1
   318  00107A  6E04               	movwf	Lcd_Set_Cursor@b,c
   319  00107C  0E01               	movlw	1
   320  00107E  EC47  F009         	call	_Lcd_Set_Cursor
   321                           
   322                           ;LCD_test.c: 39:     Lcd_Write_String("  AASTU 2019  ");
   323  001082  0E29               	movlw	low STR_1
   324  001084  6E05               	movwf	Lcd_Write_String@a,c
   325  001086  0E10               	movlw	high STR_1
   326  001088  6E06               	movwf	Lcd_Write_String@a+1,c
   327  00108A  EC1E  F009         	call	_Lcd_Write_String	;wreg free
   328                           
   329                           ;LCD_test.c: 40:     Lcd_Set_Cursor(2,1);
   330  00108E  0E01               	movlw	1
   331  001090  6E04               	movwf	Lcd_Set_Cursor@b,c
   332  001092  0E02               	movlw	2
   333  001094  EC47  F009         	call	_Lcd_Set_Cursor
   334                           
   335                           ;LCD_test.c: 41:     Lcd_Write_String("BlueMoon Intern");
   336  001098  0E19               	movlw	low STR_2
   337  00109A  6E05               	movwf	Lcd_Write_String@a,c
   338  00109C  0E10               	movlw	high STR_2
   339  00109E  6E06               	movwf	Lcd_Write_String@a+1,c
   340  0010A0  EC1E  F009         	call	_Lcd_Write_String	;wreg free
   341                           
   342                           ;LCD_test.c: 42:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   343  0010A4  0E15               	movlw	21
   344  0010A6  6E0C               	movwf	(??_main+1)& (0+255),c
   345  0010A8  0E4B               	movlw	75
   346  0010AA  6E0B               	movwf	??_main& (0+255),c
   347  0010AC  0EBE               	movlw	190
   348  0010AE                     u167:
   349  0010AE  2EE8               	decfsz	wreg,f,c
   350  0010B0  D7FE               	bra	u167
   351  0010B2  2E0B               	decfsz	??_main& (0+255),f,c
   352  0010B4  D7FC               	bra	u167
   353  0010B6  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   354  0010B8  D7FA               	bra	u167
   355  0010BA  D000               	nop2	
   356                           
   357                           ;LCD_test.c: 43:     Lcd_Clear();
   358  0010BC  ECC6  F009         	call	_Lcd_Clear	;wreg free
   359                           
   360                           ;LCD_test.c: 44:     Lcd_Set_Cursor(1,1);
   361  0010C0  0E01               	movlw	1
   362  0010C2  6E04               	movwf	Lcd_Set_Cursor@b,c
   363  0010C4  0E01               	movlw	1
   364  0010C6  EC47  F009         	call	_Lcd_Set_Cursor
   365                           
   366                           ;LCD_test.c: 45:     Lcd_Write_String("Developed_by:");
   367  0010CA  0E38               	movlw	low STR_3
   368  0010CC  6E05               	movwf	Lcd_Write_String@a,c
   369  0010CE  0E10               	movlw	high STR_3
   370  0010D0  6E06               	movwf	Lcd_Write_String@a+1,c
   371  0010D2  EC1E  F009         	call	_Lcd_Write_String	;wreg free
   372                           
   373                           ;LCD_test.c: 46:     Lcd_Set_Cursor(2,1);
   374  0010D6  0E01               	movlw	1
   375  0010D8  6E04               	movwf	Lcd_Set_Cursor@b,c
   376  0010DA  0E02               	movlw	2
   377  0010DC  EC47  F009         	call	_Lcd_Set_Cursor
   378                           
   379                           ;LCD_test.c: 47:     Lcd_Write_String("TEDROS");
   380  0010E0  0E46               	movlw	low STR_4
   381  0010E2  6E05               	movwf	Lcd_Write_String@a,c
   382  0010E4  0E10               	movlw	high STR_4
   383  0010E6  6E06               	movwf	Lcd_Write_String@a+1,c
   384  0010E8  EC1E  F009         	call	_Lcd_Write_String	;wreg free
   385                           
   386                           ;LCD_test.c: 48:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   387  0010EC  0E15               	movlw	21
   388  0010EE  6E0C               	movwf	(??_main+1)& (0+255),c
   389  0010F0  0E4B               	movlw	75
   390  0010F2  6E0B               	movwf	??_main& (0+255),c
   391  0010F4  0EBE               	movlw	190
   392  0010F6                     u177:
   393  0010F6  2EE8               	decfsz	wreg,f,c
   394  0010F8  D7FE               	bra	u177
   395  0010FA  2E0B               	decfsz	??_main& (0+255),f,c
   396  0010FC  D7FC               	bra	u177
   397  0010FE  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   398  001100  D7FA               	bra	u177
   399  001102  D000               	nop2	
   400                           
   401                           ;LCD_test.c: 49:     Lcd_Clear();
   402  001104  ECC6  F009         	call	_Lcd_Clear	;wreg free
   403                           
   404                           ;LCD_test.c: 50:     Lcd_Set_Cursor(1,1);
   405  001108  0E01               	movlw	1
   406  00110A  6E04               	movwf	Lcd_Set_Cursor@b,c
   407  00110C  0E01               	movlw	1
   408  00110E  EC47  F009         	call	_Lcd_Set_Cursor
   409                           
   410                           ;LCD_test.c: 51:     Lcd_Write_String("Afro Embedded Solutions");
   411  001112  0E01               	movlw	low STR_5
   412  001114  6E05               	movwf	Lcd_Write_String@a,c
   413  001116  0E10               	movlw	high STR_5
   414  001118  6E06               	movwf	Lcd_Write_String@a+1,c
   415  00111A  EC1E  F009         	call	_Lcd_Write_String	;wreg free
   416                           
   417                           ;LCD_test.c: 53:     for(a=0;a<15;a++)
   418  00111E  0E00               	movlw	0
   419  001120  6E0E               	movwf	main@a+1,c
   420  001122  0E00               	movlw	0
   421  001124  6E0D               	movwf	main@a,c
   422  001126                     l997:
   423                           
   424                           ;LCD_test.c: 54:     {;LCD_test.c: 55:         _delay((unsigned long)((600)*(8000000/400
      +                          0.0)));
   425  001126  0E07               	movlw	7
   426  001128  6E0C               	movwf	(??_main+1)& (0+255),c
   427  00112A  0E17               	movlw	23
   428  00112C  6E0B               	movwf	??_main& (0+255),c
   429  00112E  0E6A               	movlw	106
   430  001130                     u187:
   431  001130  2EE8               	decfsz	wreg,f,c
   432  001132  D7FE               	bra	u187
   433  001134  2E0B               	decfsz	??_main& (0+255),f,c
   434  001136  D7FC               	bra	u187
   435  001138  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   436  00113A  D7FA               	bra	u187
   437  00113C  D000               	nop2	
   438                           
   439                           ;LCD_test.c: 56:         Lcd_Shift_Left();
   440  00113E  ECBF  F009         	call	_Lcd_Shift_Left	;wreg free
   441                           
   442                           ;LCD_test.c: 57:     }
   443  001142  4A0D               	infsnz	main@a,f,c
   444  001144  2A0E               	incf	main@a+1,f,c
   445  001146  500E               	movf	main@a+1,w,c
   446  001148  E104               	bnz	u130
   447  00114A  0E0F               	movlw	15
   448  00114C  5C0D               	subwf	main@a,w,c
   449  00114E  A0D8               	btfss	status,0,c
   450  001150  D7EA               	goto	l997
   451  001152                     u130:
   452                           
   453                           ;LCD_test.c: 59:     for(a=0;a<15;a++)
   454  001152  0E00               	movlw	0
   455  001154  6E0E               	movwf	main@a+1,c
   456  001156  0E00               	movlw	0
   457  001158  6E0D               	movwf	main@a,c
   458  00115A                     l1011:
   459                           
   460                           ;LCD_test.c: 60:     {;LCD_test.c: 61:         _delay((unsigned long)((600)*(8000000/400
      +                          0.0)));
   461  00115A  0E07               	movlw	7
   462  00115C  6E0C               	movwf	(??_main+1)& (0+255),c
   463  00115E  0E17               	movlw	23
   464  001160  6E0B               	movwf	??_main& (0+255),c
   465  001162  0E6A               	movlw	106
   466  001164                     u197:
   467  001164  2EE8               	decfsz	wreg,f,c
   468  001166  D7FE               	bra	u197
   469  001168  2E0B               	decfsz	??_main& (0+255),f,c
   470  00116A  D7FC               	bra	u197
   471  00116C  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   472  00116E  D7FA               	bra	u197
   473  001170  D000               	nop2	
   474                           
   475                           ;LCD_test.c: 62:         Lcd_Shift_Right();
   476  001172  ECB8  F009         	call	_Lcd_Shift_Right	;wreg free
   477                           
   478                           ;LCD_test.c: 63:     }
   479  001176  4A0D               	infsnz	main@a,f,c
   480  001178  2A0E               	incf	main@a+1,f,c
   481  00117A  500E               	movf	main@a+1,w,c
   482  00117C  E104               	bnz	u140
   483  00117E  0E0F               	movlw	15
   484  001180  5C0D               	subwf	main@a,w,c
   485  001182  A0D8               	btfss	status,0,c
   486  001184  D7EA               	goto	l1011
   487  001186                     u140:
   488                           
   489                           ;LCD_test.c: 65:     Lcd_Clear();
   490  001186  ECC6  F009         	call	_Lcd_Clear	;wreg free
   491                           
   492                           ;LCD_test.c: 66:     Lcd_Set_Cursor(2,1);
   493  00118A  0E01               	movlw	1
   494  00118C  6E04               	movwf	Lcd_Set_Cursor@b,c
   495  00118E  0E02               	movlw	2
   496  001190  EC47  F009         	call	_Lcd_Set_Cursor
   497                           
   498                           ;LCD_test.c: 67:     Lcd_Write_Char('A');
   499  001194  0E41               	movlw	65
   500  001196  EC6F  F009         	call	_Lcd_Write_Char
   501                           
   502                           ;LCD_test.c: 68:     Lcd_Write_Char('A');
   503  00119A  0E41               	movlw	65
   504  00119C  EC6F  F009         	call	_Lcd_Write_Char
   505                           
   506                           ;LCD_test.c: 69:     Lcd_Write_Char('S');
   507  0011A0  0E53               	movlw	83
   508  0011A2  EC6F  F009         	call	_Lcd_Write_Char
   509                           
   510                           ;LCD_test.c: 70:     Lcd_Write_Char('T');
   511  0011A6  0E54               	movlw	84
   512  0011A8  EC6F  F009         	call	_Lcd_Write_Char
   513                           
   514                           ;LCD_test.c: 71:     Lcd_Write_Char('U');
   515  0011AC  0E55               	movlw	85
   516  0011AE  EC6F  F009         	call	_Lcd_Write_Char
   517                           
   518                           ;LCD_test.c: 72:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   519  0011B2  0E15               	movlw	21
   520  0011B4  6E0C               	movwf	(??_main+1)& (0+255),c
   521  0011B6  0E4B               	movlw	75
   522  0011B8  6E0B               	movwf	??_main& (0+255),c
   523  0011BA  0EBE               	movlw	190
   524  0011BC                     u207:
   525  0011BC  2EE8               	decfsz	wreg,f,c
   526  0011BE  D7FE               	bra	u207
   527  0011C0  2E0B               	decfsz	??_main& (0+255),f,c
   528  0011C2  D7FC               	bra	u207
   529  0011C4  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   530  0011C6  D7FA               	bra	u207
   531  0011C8  D000               	nop2	
   532  0011CA  D748               	goto	l959
   533  0011CC                     __end_of_main:
   534                           	opt callstack 0
   535                           
   536 ;; *************** function _Lcd_Write_String *****************
   537 ;; Defined at:
   538 ;;		line 98 in file "./lcd.h"
   539 ;; Parameters:    Size  Location     Type
   540 ;;  a               2    4[COMRAM] PTR unsigned char 
   541 ;;		 -> STR_5(24), STR_4(7), STR_3(14), STR_2(16), 
   542 ;;		 -> STR_1(15), 
   543 ;; Auto vars:     Size  Location     Type
   544 ;;  i               2    8[COMRAM] int 
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   557 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   558 ;;Total ram usage:        6 bytes
   559 ;; Hardware stack levels used:    1
   560 ;; Hardware stack levels required when called:    2
   561 ;; This function calls:
   562 ;;		_Lcd_Write_Char
   563 ;; This function is called by:
   564 ;;		_main
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text1
   569  00123C                     __ptext1:
   570                           	opt callstack 0
   571  00123C                     _Lcd_Write_String:
   572                           	opt callstack 28
   573                           
   574                           ;./lcd.h: 98: void Lcd_Write_String(char *a);./lcd.h: 99: {;./lcd.h: 100:  int i;;./lcd.
      +                          h: 101:  for(i=0;a[i]!='\0';i++)
   575                           
   576                           ;incstack = 0
   577  00123C  0E00               	movlw	0
   578  00123E  6E0A               	movwf	Lcd_Write_String@i+1,c
   579  001240  0E00               	movlw	0
   580  001242  6E09               	movwf	Lcd_Write_String@i,c
   581  001244  D012               	goto	l953
   582  001246                     l949:
   583                           
   584                           ;./lcd.h: 102:     Lcd_Write_Char(a[i]);
   585  001246  5009               	movf	Lcd_Write_String@i,w,c
   586  001248  2405               	addwf	Lcd_Write_String@a,w,c
   587  00124A  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   588  00124C  500A               	movf	Lcd_Write_String@i+1,w,c
   589  00124E  2006               	addwfc	Lcd_Write_String@a+1,w,c
   590  001250  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   591  001252  0060  F01F  FFF6   	movff	??_Lcd_Write_String,tblptrl
   592  001258  0060  F023  FFF7   	movff	??_Lcd_Write_String+1,tblptrh
   593  00125E                     	if	0	;tblptru may be non-zero
   594  00125E                     	endif
   595  00125E                     	if	0	;tblptru may be non-zero
   596  00125E                     	endif
   597  00125E  0008               	tblrd		*
   598  001260  50F5               	movf	tablat,w,c
   599  001262  EC6F  F009         	call	_Lcd_Write_Char
   600  001266  4A09               	infsnz	Lcd_Write_String@i,f,c
   601  001268  2A0A               	incf	Lcd_Write_String@i+1,f,c
   602  00126A                     l953:
   603  00126A  5009               	movf	Lcd_Write_String@i,w,c
   604  00126C  2405               	addwf	Lcd_Write_String@a,w,c
   605  00126E  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   606  001270  500A               	movf	Lcd_Write_String@i+1,w,c
   607  001272  2006               	addwfc	Lcd_Write_String@a+1,w,c
   608  001274  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   609  001276  0060  F01F  FFF6   	movff	??_Lcd_Write_String,tblptrl
   610  00127C  0060  F023  FFF7   	movff	??_Lcd_Write_String+1,tblptrh
   611  001282                     	if	0	;tblptru may be non-zero
   612  001282                     	endif
   613  001282                     	if	0	;tblptru may be non-zero
   614  001282                     	endif
   615  001282  0008               	tblrd		*
   616  001284  50F5               	movf	tablat,w,c
   617  001286  0900               	iorlw	0
   618  001288  B4D8               	btfsc	status,2,c
   619  00128A  0012               	return	
   620  00128C  D7DC               	goto	l949
   621  00128E                     __end_of_Lcd_Write_String:
   622                           	opt callstack 0
   623                           
   624 ;; *************** function _Lcd_Write_Char *****************
   625 ;; Defined at:
   626 ;;		line 82 in file "./lcd.h"
   627 ;; Parameters:    Size  Location     Type
   628 ;;  a               1    wreg     unsigned char 
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  a               1    3[COMRAM] unsigned char 
   631 ;;  y               1    2[COMRAM] unsigned char 
   632 ;;  temp            1    1[COMRAM] unsigned char 
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		wreg, status,2, status,0, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   643 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   645 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   646 ;;Total ram usage:        3 bytes
   647 ;; Hardware stack levels used:    1
   648 ;; Hardware stack levels required when called:    1
   649 ;; This function calls:
   650 ;;		_Lcd_Port
   651 ;; This function is called by:
   652 ;;		_Lcd_Write_String
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text2
   658  0012DE                     __ptext2:
   659                           	opt callstack 0
   660  0012DE                     _Lcd_Write_Char:
   661                           	opt callstack 28
   662                           
   663                           ;incstack = 0
   664                           ;Lcd_Write_Char@a stored from wreg
   665  0012DE  6E04               	movwf	Lcd_Write_Char@a,c
   666                           
   667                           ;./lcd.h: 82: void Lcd_Write_Char(char a);./lcd.h: 83: {;./lcd.h: 84:    char temp,y;;./
      +                          lcd.h: 85:    temp = a&0x0F;
   668  0012E0  5004               	movf	Lcd_Write_Char@a,w,c
   669  0012E2  0B0F               	andlw	15
   670  0012E4  6E02               	movwf	Lcd_Write_Char@temp,c
   671                           
   672                           ;./lcd.h: 86:    y = a&0xF0;
   673  0012E6  5004               	movf	Lcd_Write_Char@a,w,c
   674  0012E8  0BF0               	andlw	240
   675  0012EA  6E03               	movwf	Lcd_Write_Char@y,c
   676                           
   677                           ;./lcd.h: 87:    RD2 = 1;
   678  0012EC  84CD               	bsf	16333,2,c	;volatile
   679                           
   680                           ;./lcd.h: 88:    Lcd_Port(y>>4);
   681  0012EE  3803               	swapf	Lcd_Write_Char@y,w,c
   682  0012F0  0B0F               	andlw	15
   683  0012F2  EC8B  F009         	call	_Lcd_Port
   684                           
   685                           ;./lcd.h: 89:    RD3 = 1;
   686  0012F6  86CD               	bsf	16333,3,c	;volatile
   687                           
   688                           ;./lcd.h: 90:    _delay((unsigned long)((40)*(8000000/4000000.0)));
   689  0012F8  0E1A               	movlw	26
   690  0012FA                     u217:
   691  0012FA  2EE8               	decfsz	wreg,f,c
   692  0012FC  D7FE               	bra	u217
   693  0012FE  D000               	nop2	
   694                           
   695                           ;./lcd.h: 91:    RD3 = 0;
   696  001300  96CD               	bcf	16333,3,c	;volatile
   697                           
   698                           ;./lcd.h: 92:    Lcd_Port(temp);
   699  001302  5002               	movf	Lcd_Write_Char@temp,w,c
   700  001304  EC8B  F009         	call	_Lcd_Port
   701                           
   702                           ;./lcd.h: 93:    RD3 = 1;
   703  001308  86CD               	bsf	16333,3,c	;volatile
   704                           
   705                           ;./lcd.h: 94:    _delay((unsigned long)((40)*(8000000/4000000.0)));
   706  00130A  0E1A               	movlw	26
   707  00130C                     u227:
   708  00130C  2EE8               	decfsz	wreg,f,c
   709  00130E  D7FE               	bra	u227
   710  001310  D000               	nop2	
   711                           
   712                           ;./lcd.h: 95:    RD3 = 0;
   713  001312  96CD               	bcf	16333,3,c	;volatile
   714  001314  0012               	return		;funcret
   715  001316                     __end_of_Lcd_Write_Char:
   716                           	opt callstack 0
   717                           
   718 ;; *************** function _Lcd_Shift_Right *****************
   719 ;; Defined at:
   720 ;;		line 107 in file "./lcd.h"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, status,2, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   738 ;;Total ram usage:        0 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; Hardware stack levels required when called:    2
   741 ;; This function calls:
   742 ;;		_Lcd_Cmd
   743 ;; This function is called by:
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           	psect	text3
   749  001370                     __ptext3:
   750                           	opt callstack 0
   751  001370                     _Lcd_Shift_Right:
   752                           	opt callstack 28
   753                           
   754                           ;./lcd.h: 109:  Lcd_Cmd(0x01);
   755                           
   756                           ;incstack = 0
   757  001370  0E01               	movlw	1
   758  001372  ECA1  F009         	call	_Lcd_Cmd
   759                           
   760                           ;./lcd.h: 110:  Lcd_Cmd(0x0C);
   761  001376  0E0C               	movlw	12
   762  001378  ECA1  F009         	call	_Lcd_Cmd
   763  00137C  0012               	return		;funcret
   764  00137E                     __end_of_Lcd_Shift_Right:
   765                           	opt callstack 0
   766                           
   767 ;; *************** function _Lcd_Shift_Left *****************
   768 ;; Defined at:
   769 ;;		line 113 in file "./lcd.h"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;Total ram usage:        0 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    2
   790 ;; This function calls:
   791 ;;		_Lcd_Cmd
   792 ;; This function is called by:
   793 ;;		_main
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text4
   798  00137E                     __ptext4:
   799                           	opt callstack 0
   800  00137E                     _Lcd_Shift_Left:
   801                           	opt callstack 28
   802                           
   803                           ;./lcd.h: 115:  Lcd_Cmd(0x01);
   804                           
   805                           ;incstack = 0
   806  00137E  0E01               	movlw	1
   807  001380  ECA1  F009         	call	_Lcd_Cmd
   808                           
   809                           ;./lcd.h: 116:  Lcd_Cmd(0x08);
   810  001384  0E08               	movlw	8
   811  001386  ECA1  F009         	call	_Lcd_Cmd
   812  00138A  0012               	return		;funcret
   813  00138C                     __end_of_Lcd_Shift_Left:
   814                           	opt callstack 0
   815                           
   816 ;; *************** function _Lcd_Set_Cursor *****************
   817 ;; Defined at:
   818 ;;		line 42 in file "./lcd.h"
   819 ;; Parameters:    Size  Location     Type
   820 ;;  a               1    wreg     unsigned char 
   821 ;;  b               1    3[COMRAM] unsigned char 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  a               1    4[COMRAM] unsigned char 
   824 ;;  temp            1    7[COMRAM] unsigned char 
   825 ;;  y               1    6[COMRAM] unsigned char 
   826 ;;  z               1    5[COMRAM] unsigned char 
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, status,2, status,0, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   836 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;Total ram usage:        5 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    2
   843 ;; This function calls:
   844 ;;		_Lcd_Cmd
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           	psect	text5
   851  00128E                     __ptext5:
   852                           	opt callstack 0
   853  00128E                     _Lcd_Set_Cursor:
   854                           	opt callstack 28
   855                           
   856                           ;incstack = 0
   857                           ;Lcd_Set_Cursor@a stored from wreg
   858  00128E  6E05               	movwf	Lcd_Set_Cursor@a,c
   859                           
   860                           ;./lcd.h: 42: void Lcd_Set_Cursor(char a, char b);./lcd.h: 43: {;./lcd.h: 44:  char temp
      +                          ,z,y;;./lcd.h: 45:  if(a == 1)
   861  001290  0405               	decf	Lcd_Set_Cursor@a,w,c
   862  001292  A4D8               	btfss	status,2,c
   863  001294  D010               	goto	l939
   864                           
   865                           ;./lcd.h: 46:  {;./lcd.h: 47:    temp = 0x80 + b - 1;
   866  001296  5004               	movf	Lcd_Set_Cursor@b,w,c
   867  001298  0F7F               	addlw	127
   868  00129A  6E08               	movwf	Lcd_Set_Cursor@temp,c
   869                           
   870                           ;./lcd.h: 48:   z = temp>>4;
   871  00129C  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   872  00129E  0B0F               	andlw	15
   873  0012A0  6E06               	movwf	Lcd_Set_Cursor@z,c
   874                           
   875                           ;./lcd.h: 49:   y = temp & 0x0F;
   876  0012A2  5008               	movf	Lcd_Set_Cursor@temp,w,c
   877  0012A4  0B0F               	andlw	15
   878  0012A6  6E07               	movwf	Lcd_Set_Cursor@y,c
   879                           
   880                           ;./lcd.h: 50:   Lcd_Cmd(z);
   881  0012A8  5006               	movf	Lcd_Set_Cursor@z,w,c
   882  0012AA  ECA1  F009         	call	_Lcd_Cmd
   883                           
   884                           ;./lcd.h: 51:   Lcd_Cmd(y);
   885  0012AE  5007               	movf	Lcd_Set_Cursor@y,w,c
   886  0012B0  ECA1  F009         	call	_Lcd_Cmd
   887                           
   888                           ;./lcd.h: 52:  }
   889  0012B4  0012               	return	
   890  0012B6                     l939:
   891  0012B6  0E02               	movlw	2
   892  0012B8  1805               	xorwf	Lcd_Set_Cursor@a,w,c
   893  0012BA  A4D8               	btfss	status,2,c
   894  0012BC  0012               	return	
   895                           
   896                           ;./lcd.h: 54:  {;./lcd.h: 55:   temp = 0xC0 + b - 1;
   897  0012BE  5004               	movf	Lcd_Set_Cursor@b,w,c
   898  0012C0  0FBF               	addlw	191
   899  0012C2  6E08               	movwf	Lcd_Set_Cursor@temp,c
   900                           
   901                           ;./lcd.h: 56:   z = temp>>4;
   902  0012C4  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   903  0012C6  0B0F               	andlw	15
   904  0012C8  6E06               	movwf	Lcd_Set_Cursor@z,c
   905                           
   906                           ;./lcd.h: 57:   y = temp & 0x0F;
   907  0012CA  5008               	movf	Lcd_Set_Cursor@temp,w,c
   908  0012CC  0B0F               	andlw	15
   909  0012CE  6E07               	movwf	Lcd_Set_Cursor@y,c
   910                           
   911                           ;./lcd.h: 58:   Lcd_Cmd(z);
   912  0012D0  5006               	movf	Lcd_Set_Cursor@z,w,c
   913  0012D2  ECA1  F009         	call	_Lcd_Cmd
   914                           
   915                           ;./lcd.h: 59:   Lcd_Cmd(y);
   916  0012D6  5007               	movf	Lcd_Set_Cursor@y,w,c
   917  0012D8  ECA1  F009         	call	_Lcd_Cmd
   918  0012DC  0012               	return		;funcret
   919  0012DE                     __end_of_Lcd_Set_Cursor:
   920                           	opt callstack 0
   921                           
   922 ;; *************** function _Lcd_Init *****************
   923 ;; Defined at:
   924 ;;		line 63 in file "./lcd.h"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, status,2, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;Total ram usage:        1 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    2
   945 ;; This function calls:
   946 ;;		_Lcd_Cmd
   947 ;;		_Lcd_Port
   948 ;; This function is called by:
   949 ;;		_main
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text6
   954  0011CC                     __ptext6:
   955                           	opt callstack 0
   956  0011CC                     _Lcd_Init:
   957                           	opt callstack 28
   958                           
   959                           ;./lcd.h: 65:   Lcd_Port(0x00);
   960                           
   961                           ;incstack = 0
   962  0011CC  0E00               	movlw	0
   963  0011CE  EC8B  F009         	call	_Lcd_Port
   964                           
   965                           ;./lcd.h: 66:    _delay((unsigned long)((20)*(8000000/4000.0)));
   966  0011D2  0E34               	movlw	52
   967  0011D4  6E04               	movwf	??_Lcd_Init& (0+255),c
   968  0011D6  0EF2               	movlw	242
   969  0011D8                     u237:
   970  0011D8  2EE8               	decfsz	wreg,f,c
   971  0011DA  D7FE               	bra	u237
   972  0011DC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   973  0011DE  D7FC               	bra	u237
   974                           
   975                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
   976  0011E0  0E03               	movlw	3
   977  0011E2  ECA1  F009         	call	_Lcd_Cmd
   978                           
   979                           ;./lcd.h: 68:  _delay((unsigned long)((5)*(8000000/4000.0)));
   980  0011E6  0E0D               	movlw	13
   981  0011E8  6E04               	movwf	??_Lcd_Init& (0+255),c
   982  0011EA  0EFC               	movlw	252
   983  0011EC                     u247:
   984  0011EC  2EE8               	decfsz	wreg,f,c
   985  0011EE  D7FE               	bra	u247
   986  0011F0  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   987  0011F2  D7FC               	bra	u247
   988                           
   989                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
   990  0011F4  0E03               	movlw	3
   991  0011F6  ECA1  F009         	call	_Lcd_Cmd
   992                           
   993                           ;./lcd.h: 70:  _delay((unsigned long)((11)*(8000000/4000.0)));
   994  0011FA  0E1D               	movlw	29
   995  0011FC  6E04               	movwf	??_Lcd_Init& (0+255),c
   996  0011FE  0E91               	movlw	145
   997  001200                     u257:
   998  001200  2EE8               	decfsz	wreg,f,c
   999  001202  D7FE               	bra	u257
  1000  001204  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1001  001206  D7FC               	bra	u257
  1002  001208  F000               	nop	
  1003                           
  1004                           ;./lcd.h: 71:   Lcd_Cmd(0x03);
  1005  00120A  0E03               	movlw	3
  1006  00120C  ECA1  F009         	call	_Lcd_Cmd
  1007                           
  1008                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
  1009  001210  0E02               	movlw	2
  1010  001212  ECA1  F009         	call	_Lcd_Cmd
  1011                           
  1012                           ;./lcd.h: 74:   Lcd_Cmd(0x02);
  1013  001216  0E02               	movlw	2
  1014  001218  ECA1  F009         	call	_Lcd_Cmd
  1015                           
  1016                           ;./lcd.h: 75:   Lcd_Cmd(0x08);
  1017  00121C  0E08               	movlw	8
  1018  00121E  ECA1  F009         	call	_Lcd_Cmd
  1019                           
  1020                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
  1021  001222  0E00               	movlw	0
  1022  001224  ECA1  F009         	call	_Lcd_Cmd
  1023                           
  1024                           ;./lcd.h: 77:   Lcd_Cmd(0x0C);
  1025  001228  0E0C               	movlw	12
  1026  00122A  ECA1  F009         	call	_Lcd_Cmd
  1027                           
  1028                           ;./lcd.h: 78:   Lcd_Cmd(0x00);
  1029  00122E  0E00               	movlw	0
  1030  001230  ECA1  F009         	call	_Lcd_Cmd
  1031                           
  1032                           ;./lcd.h: 79:   Lcd_Cmd(0x06);
  1033  001234  0E06               	movlw	6
  1034  001236  ECA1  F009         	call	_Lcd_Cmd
  1035  00123A  0012               	return		;funcret
  1036  00123C                     __end_of_Lcd_Init:
  1037                           	opt callstack 0
  1038                           
  1039 ;; *************** function _Lcd_Clear *****************
  1040 ;; Defined at:
  1041 ;;		line 36 in file "./lcd.h"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;		None
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, status,2, cstack
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;Total ram usage:        0 bytes
  1060 ;; Hardware stack levels used:    1
  1061 ;; Hardware stack levels required when called:    2
  1062 ;; This function calls:
  1063 ;;		_Lcd_Cmd
  1064 ;; This function is called by:
  1065 ;;		_main
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           	psect	text7
  1070  00138C                     __ptext7:
  1071                           	opt callstack 0
  1072  00138C                     _Lcd_Clear:
  1073                           	opt callstack 28
  1074                           
  1075                           ;./lcd.h: 38:  Lcd_Cmd(0);
  1076                           
  1077                           ;incstack = 0
  1078  00138C  0E00               	movlw	0
  1079  00138E  ECA1  F009         	call	_Lcd_Cmd
  1080                           
  1081                           ;./lcd.h: 39:  Lcd_Cmd(1);
  1082  001392  0E01               	movlw	1
  1083  001394  ECA1  F009         	call	_Lcd_Cmd
  1084  001398  0012               	return		;funcret
  1085  00139A                     __end_of_Lcd_Clear:
  1086                           	opt callstack 0
  1087                           
  1088 ;; *************** function _Lcd_Cmd *****************
  1089 ;; Defined at:
  1090 ;;		line 27 in file "./lcd.h"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  a               1    wreg     unsigned char 
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;  a               1    2[COMRAM] unsigned char 
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  1    wreg      void 
  1097 ;; Registers used:
  1098 ;;		wreg, status,2, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;Total ram usage:        2 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    1
  1111 ;; This function calls:
  1112 ;;		_Lcd_Port
  1113 ;; This function is called by:
  1114 ;;		_Lcd_Clear
  1115 ;;		_Lcd_Set_Cursor
  1116 ;;		_Lcd_Init
  1117 ;;		_Lcd_Shift_Right
  1118 ;;		_Lcd_Shift_Left
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text8
  1123  001342                     __ptext8:
  1124                           	opt callstack 0
  1125  001342                     _Lcd_Cmd:
  1126                           	opt callstack 28
  1127                           
  1128                           ;incstack = 0
  1129                           ;Lcd_Cmd@a stored from wreg
  1130  001342  6E03               	movwf	Lcd_Cmd@a,c
  1131                           
  1132                           ;./lcd.h: 27: void Lcd_Cmd(char a);./lcd.h: 28: {;./lcd.h: 29:  RD2 = 0;
  1133  001344  94CD               	bcf	16333,2,c	;volatile
  1134                           
  1135                           ;./lcd.h: 30:  Lcd_Port(a);
  1136  001346  5003               	movf	Lcd_Cmd@a,w,c
  1137  001348  EC8B  F009         	call	_Lcd_Port
  1138                           
  1139                           ;./lcd.h: 31:  RD3 = 1;
  1140  00134C  86CD               	bsf	16333,3,c	;volatile
  1141                           
  1142                           ;./lcd.h: 32:         _delay((unsigned long)((4)*(8000000/4000.0)));
  1143  00134E  0E0B               	movlw	11
  1144  001350  6E02               	movwf	??_Lcd_Cmd& (0+255),c
  1145  001352  0E62               	movlw	98
  1146  001354                     u267:
  1147  001354  2EE8               	decfsz	wreg,f,c
  1148  001356  D7FE               	bra	u267
  1149  001358  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
  1150  00135A  D7FC               	bra	u267
  1151  00135C  D000               	nop2	
  1152                           
  1153                           ;./lcd.h: 33:         RD3 = 0;
  1154  00135E  96CD               	bcf	16333,3,c	;volatile
  1155  001360  0012               	return		;funcret
  1156  001362                     __end_of_Lcd_Cmd:
  1157                           	opt callstack 0
  1158                           
  1159 ;; *************** function _Lcd_Port *****************
  1160 ;; Defined at:
  1161 ;;		line 5 in file "./lcd.h"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  a               1    wreg     unsigned char 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  a               1    0[COMRAM] unsigned char 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1178 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;Total ram usage:        1 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_Lcd_Cmd
  1185 ;;		_Lcd_Init
  1186 ;;		_Lcd_Write_Char
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           	psect	text9
  1191  001316                     __ptext9:
  1192                           	opt callstack 0
  1193  001316                     _Lcd_Port:
  1194                           	opt callstack 28
  1195                           
  1196                           ;incstack = 0
  1197                           ;Lcd_Port@a stored from wreg
  1198  001316  6E01               	movwf	Lcd_Port@a,c
  1199                           
  1200                           ;./lcd.h: 5: void Lcd_Port(char a);./lcd.h: 6: {;./lcd.h: 7:  if(a & 1)
  1201  001318  A001               	btfss	Lcd_Port@a,0,c
  1202  00131A  D002               	goto	l21
  1203                           
  1204                           ;./lcd.h: 8:   RD4 = 1;
  1205  00131C  88CD               	bsf	16333,4,c	;volatile
  1206  00131E  D001               	goto	l751
  1207  001320                     l21:
  1208                           
  1209                           ;./lcd.h: 10:   RD4 = 0;
  1210  001320  98CD               	bcf	16333,4,c	;volatile
  1211  001322                     l751:
  1212                           
  1213                           ;./lcd.h: 12:  if(a & 2)
  1214  001322  A201               	btfss	Lcd_Port@a,1,c
  1215  001324  D002               	goto	l23
  1216                           
  1217                           ;./lcd.h: 13:   RD5 = 1;
  1218  001326  8ACD               	bsf	16333,5,c	;volatile
  1219  001328  D001               	goto	l755
  1220  00132A                     l23:
  1221                           
  1222                           ;./lcd.h: 15:   RD5 = 0;
  1223  00132A  9ACD               	bcf	16333,5,c	;volatile
  1224  00132C                     l755:
  1225                           
  1226                           ;./lcd.h: 17:  if(a & 4)
  1227  00132C  A401               	btfss	Lcd_Port@a,2,c
  1228  00132E  D002               	goto	l25
  1229                           
  1230                           ;./lcd.h: 18:   RD6 = 1;
  1231  001330  8CCD               	bsf	16333,6,c	;volatile
  1232  001332  D001               	goto	l759
  1233  001334                     l25:
  1234                           
  1235                           ;./lcd.h: 20:   RD6 = 0;
  1236  001334  9CCD               	bcf	16333,6,c	;volatile
  1237  001336                     l759:
  1238                           
  1239                           ;./lcd.h: 22:  if(a & 8)
  1240  001336  A601               	btfss	Lcd_Port@a,3,c
  1241  001338  D002               	goto	l27
  1242                           
  1243                           ;./lcd.h: 23:   RD7 = 1;
  1244  00133A  8ECD               	bsf	16333,7,c	;volatile
  1245  00133C  0012               	return	
  1246  00133E                     l27:
  1247                           
  1248                           ;./lcd.h: 25:   RD7 = 0;
  1249  00133E  9ECD               	bcf	16333,7,c	;volatile
  1250  001340  0012               	return		;funcret
  1251  001342                     __end_of_Lcd_Port:
  1252                           	opt callstack 0
  1253                           
  1254                           	psect	rparam
  1255  0000                     tosu	equ	0x3FFF
  1256                           tosh	equ	0x3FFE
  1257                           tosl	equ	0x3FFD
  1258                           stkptr	equ	0x3FFC
  1259                           pclatu	equ	0x3FFB
  1260                           pclath	equ	0x3FFA
  1261                           pcl	equ	0x3FF9
  1262                           tblptru	equ	0x3FF8
  1263                           tblptrh	equ	0x3FF7
  1264                           tblptrl	equ	0x3FF6
  1265                           tablat	equ	0x3FF5
  1266                           prodh	equ	0x3FF4
  1267                           prodl	equ	0x3FF3
  1268                           indf0	equ	0x3FEF
  1269                           postinc0	equ	0x3FEE
  1270                           postdec0	equ	0x3FED
  1271                           preinc0	equ	0x3FEC
  1272                           plusw0	equ	0x3FEB
  1273                           fsr0h	equ	0x3FEA
  1274                           fsr0l	equ	0x3FE9
  1275                           wreg	equ	0x3FE8
  1276                           indf1	equ	0x3FE7
  1277                           postinc1	equ	0x3FE6
  1278                           postdec1	equ	0x3FE5
  1279                           preinc1	equ	0x3FE4
  1280                           plusw1	equ	0x3FE3
  1281                           fsr1h	equ	0x3FE2
  1282                           fsr1l	equ	0x3FE1
  1283                           bsr	equ	0x3FE0
  1284                           indf2	equ	0x3FDF
  1285                           postinc2	equ	0x3FDE
  1286                           postdec2	equ	0x3FDD
  1287                           preinc2	equ	0x3FDC
  1288                           plusw2	equ	0x3FDB
  1289                           fsr2h	equ	0x3FDA
  1290                           fsr2l	equ	0x3FD9
  1291                           status	equ	0x3FD8


Data Sizes:
    Strings     76
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 24
		 -> STR_5(CODE[24]), STR_4(CODE[7]), STR_3(CODE[14]), STR_2(CODE[16]), 
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1963
                                             10 COMRAM     4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     590
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     801
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      E       E       1       14.7%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BANK10             100      0       0      24        0.0%
BANK11             100      0       0      25        0.0%
BANK12             100      0       0      26        0.0%
BANK13             100      0       0      27        0.0%
BITBANK14          100      0       0      28        0.0%
BANK14             100      0       0      29        0.0%
BITBANK15          100      0       0      30        0.0%
BANK15             100      0       0      31        0.0%
ABS                  0      0       0      32        0.0%
BITBANK10          100      0       0      33        0.0%
BITBANK11          100      0       0      34        0.0%
BITBANK12          100      0       0      35        0.0%
BITBANK13          100      0       0      36        0.0%
BIGRAM             FFF      0       0      37        0.0%
BITSFR_8             0      0       0     200        0.0%
SFR_8                0      0       0     200        0.0%
BITSFR_7             0      0       0     200        0.0%
SFR_7                0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jul 25 15:53:33 2019

              __CFG_CP$OFF 000000                         l21 1320                         l23 132A  
                       l25 1334                         l27 133E                __CFG_LVP$ON 000000  
                      l751 1322                        l755 132C                        l759 1336  
                      l953 126A                        l939 12B6                        l949 1246  
                      l959 105C                        l997 1126                        _RD2 01FE6A  
                      _RD3 01FE6B                        _RD4 01FE6C                        _RD5 01FE6D  
                      _RD6 01FE6E                        _RD7 01FE6F                        u130 1152  
                      u140 1186                        u207 11BC                        u217 12FA  
                      u227 130C                        u237 11D8                        u157 1066  
                      u247 11EC                        u167 10AE                        u257 1200  
                      u177 10F6                        u267 1354                        u187 1130  
                      u197 1164                        wreg 003FE8              __CFG_BBEN$OFF 000000  
             __CFG_ZCD$OFF 000000                       l1011 115A                       STR_1 1029  
                     STR_2 1019                       STR_3 1038                       STR_4 1046  
                     STR_5 1001          ?_Lcd_Write_String 0005                       _main 104E  
                     start FFFC         ??_Lcd_Write_String 0007            __end_of_Lcd_Cmd 1362  
            __CFG_CSWEN$ON 000000               ___param_bank 000000                      ?_main 0001  
            __CFG_WDTE$OFF 000000             __CFG_DEBUG$OFF 000000    __size_of_Lcd_Set_Cursor 0050  
                    _TRISD 003FC5             __CFG_FCMEN$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000    __size_of_Lcd_Shift_Left 000E  
       __CFG_MCLRE$EXTMCLR 000000                      main@a 000D                      tablat 003FF5  
                    status 003FD8           __end_of_Lcd_Init 123C           __end_of_Lcd_Port 1342  
          __initialization 1362               __end_of_main 11CC             __CFG_SAFEN$OFF 000000  
                   ??_main 000B             __CFG_PR1WAY$ON 000000         __size_of_Lcd_Clear 000E  
            __activetblptr 000001                     _ANSELD 003A70             __CFG_WDTCCS$SC 000000  
       __CFG_RSTOSC$EXTOSC 000000                  ??_Lcd_Cmd 0002    __size_of_Lcd_Write_Char 0038  
           __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000   __size_of_Lcd_Shift_Right 000E  
             __mediumconst 0000                     tblptrh 003FF7                     tblptrl 003FF6  
                   tblptru 003FF8            Lcd_Set_Cursor@a 0005            Lcd_Set_Cursor@b 0004  
          Lcd_Set_Cursor@y 0007            Lcd_Set_Cursor@z 0006                 __accesstop 0060  
  __end_of__initialization 1362            __CFG_FEXTOSC$HS 000000          __end_of_Lcd_Clear 139A  
            ___rparam_used 000001             __pcstackCOMRAM 0001             _Lcd_Set_Cursor 128E  
           _Lcd_Shift_Left 137E                  ?_Lcd_Init 0001                  ?_Lcd_Port 0001  
          __CFG_IVT1WAY$ON 000000            __CFG_MVECEN$OFF 000000            __CFG_PPS1WAY$ON 000000  
__size_of_Lcd_Write_String 0052     __end_of_Lcd_Set_Cursor 12DE        __CFG_PWRTS$PWRT_OFF 000000  
   __end_of_Lcd_Shift_Left 138C          ??_Lcd_Shift_Right 0004                 ??_Lcd_Init 0004  
               ??_Lcd_Port 0001             _Lcd_Write_Char 12DE                    _Lcd_Cmd 1342  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 1000  
                  __pcinit 1362                    __ramtop 1000            ?_Lcd_Set_Cursor 0004  
                  __ptext0 104E                    __ptext1 123C                    __ptext2 12DE  
                  __ptext3 1370                    __ptext4 137E                    __ptext5 128E  
                  __ptext6 11CC                    __ptext7 138C                    __ptext8 1342  
                  __ptext9 1316            __CFG_WRTAPP$OFF 000000            ?_Lcd_Shift_Left 0001  
          __CFG_WRTSAF$OFF 000000     __end_of_Lcd_Write_Char 1316       end_of_initialization 1362  
                Lcd_Port@a 0001      __CFG_WDTCPS$WDTCPS_31 000000            ?_Lcd_Write_Char 0001  
        Lcd_Write_String@a 0005          Lcd_Write_String@i 0009                  _Lcd_Clear 138C  
         _Lcd_Write_String 123C        start_initialization 1362          __size_of_Lcd_Init 0070  
        __size_of_Lcd_Port 002C           __CFG_LPBOREN$OFF 000000                 ?_Lcd_Clear 0001  
          _Lcd_Shift_Right 1370            Lcd_Write_Char@a 0004            Lcd_Write_Char@y 0003  
                 ?_Lcd_Cmd 0001           ??_Lcd_Set_Cursor 0005           ??_Lcd_Shift_Left 0004  
   __CFG_BBSIZE$BBSIZE_512 000000                __smallconst 1000    __end_of_Lcd_Shift_Right 137E  
      __CFG_BORV$VBOR_2P45 000000                   Lcd_Cmd@a 0003                ??_Lcd_Clear 0004  
         ??_Lcd_Write_Char 0002                   _Lcd_Init 11CC                   _Lcd_Port 1316  
 __end_of_Lcd_Write_String 128E           __size_of_Lcd_Cmd 0020                   __Hrparam 0000  
                 __Lrparam 0000               __Lsmallconst 1000         __CFG_BOREN$SBORDIS 000000  
            __size_of_main 017E           ?_Lcd_Shift_Right 0001       __CFG_WDTCWS$WDTCWS_7 000000  
       Lcd_Write_Char@temp 0002          __CFG_CLKOUTEN$OFF 000000         Lcd_Set_Cursor@temp 0008  
