

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jul 25 15:41:17 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F46K42
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F46K42 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _ANSELD	set	14960
    54  0000                     _TRISD	set	16325
    55  0000                     _RD3	set	130667
    56  0000                     _RD2	set	130666
    57  0000                     _RD7	set	130671
    58  0000                     _RD6	set	130670
    59  0000                     _RD5	set	130669
    60  0000                     _RD4	set	130668
    61                           
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt callstack 0
    65  001000  00                 	db	0
    66  001001                     STR_1:
    67  001001  20                 	db	32
    68  001002  54                 	db	84	;'T'
    69  001003  3A                 	db	58	;':'
    70  001004  32                 	db	50	;'2'
    71  001005  33                 	db	51	;'3'
    72  001006  27                 	db	39
    73  001007  43                 	db	67	;'C'
    74  001008  20                 	db	32
    75  001009  20                 	db	32
    76  00100A  50                 	db	80	;'P'
    77  00100B  48                 	db	72	;'H'
    78  00100C  3A                 	db	58	;':'
    79  00100D  36                 	db	54	;'6'
    80  00100E  2E                 	db	46
    81  00100F  35                 	db	53	;'5'
    82  001010  20                 	db	32
    83  001011  00                 	db	0
    84  001012                     STR_2:
    85  001012  44                 	db	68	;'D'
    86  001013  61                 	db	97	;'a'
    87  001014  74                 	db	116	;'t'
    88  001015  65                 	db	101	;'e'
    89  001016  3A                 	db	58	;':'
    90  001017  20                 	db	32
    91  001018  32                 	db	50	;'2'
    92  001019  20                 	db	32
    93  00101A  64                 	db	100	;'d'
    94  00101B  61                 	db	97	;'a'
    95  00101C  79                 	db	121	;'y'
    96  00101D  73                 	db	115	;'s'
    97  00101E  20                 	db	32
    98  00101F  6F                 	db	111	;'o'
    99  001020  6C                 	db	108	;'l'
   100  001021  64                 	db	100	;'d'
   101  001022  00                 	db	0
   102                           
   103                           ; #config settings
   104  001023  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           	psect	cinit
   107  00122A                     __pcinit:
   108                           	opt callstack 0
   109  00122A                     start_initialization:
   110                           	opt callstack 0
   111  00122A                     __initialization:
   112                           	opt callstack 0
   113  00122A                     end_of_initialization:
   114                           	opt callstack 0
   115  00122A                     __end_of__initialization:
   116                           	opt callstack 0
   117  00122A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   118  00122C  6EF8               	movwf	tblptru,c
   119  00122E  0E10               	movlw	high __Lsmallconst
   120  001230  6EF7               	movwf	tblptrh,c
   121  001232  0100               	movlb	0
   122  001234  EF12  F008         	goto	_main	;jump to C main() function
   123                           
   124                           	psect	cstackCOMRAM
   125  000001                     __pcstackCOMRAM:
   126                           	opt callstack 0
   127  000001                     Lcd_Port@a:
   128                           	opt callstack 0
   129                           
   130                           ; 1 bytes @ 0x0
   131  000001                     	ds	1
   132  000002                     ??_Lcd_Cmd:
   133  000002                     Lcd_Write_Char@temp:
   134                           	opt callstack 0
   135                           
   136                           ; 1 bytes @ 0x1
   137  000002                     	ds	1
   138  000003                     Lcd_Cmd@a:
   139                           	opt callstack 0
   140  000003                     Lcd_Write_Char@y:
   141                           	opt callstack 0
   142                           
   143                           ; 1 bytes @ 0x2
   144  000003                     	ds	1
   145  000004                     ??_Lcd_Init:
   146  000004                     Lcd_Set_Cursor@b:
   147                           	opt callstack 0
   148  000004                     Lcd_Write_Char@a:
   149                           	opt callstack 0
   150                           
   151                           ; 1 bytes @ 0x3
   152  000004                     	ds	1
   153  000005                     Lcd_Set_Cursor@a:
   154                           	opt callstack 0
   155  000005                     Lcd_Write_String@a:
   156                           	opt callstack 0
   157                           
   158                           ; 2 bytes @ 0x4
   159  000005                     	ds	1
   160  000006                     Lcd_Set_Cursor@z:
   161                           	opt callstack 0
   162                           
   163                           ; 1 bytes @ 0x5
   164  000006                     	ds	1
   165  000007                     ??_Lcd_Write_String:
   166  000007                     Lcd_Set_Cursor@y:
   167                           	opt callstack 0
   168                           
   169                           ; 1 bytes @ 0x6
   170  000007                     	ds	1
   171  000008                     Lcd_Set_Cursor@temp:
   172                           	opt callstack 0
   173                           
   174                           ; 1 bytes @ 0x7
   175  000008                     	ds	1
   176  000009                     Lcd_Write_String@i:
   177                           	opt callstack 0
   178                           
   179                           ; 2 bytes @ 0x8
   180  000009                     	ds	2
   181  00000B                     ??_main:
   182                           
   183                           ; 1 bytes @ 0xA
   184  00000B                     	ds	2
   185                           
   186 ;;
   187 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   188 ;;
   189 ;; *************** function _main *****************
   190 ;; Defined at:
   191 ;;		line 27 in file "LCD_test.c"
   192 ;; Parameters:    Size  Location     Type
   193 ;;		None
   194 ;; Auto vars:     Size  Location     Type
   195 ;;  a               2    0        unsigned int 
   196 ;; Return value:  Size  Location     Type
   197 ;;                  2   63[None  ] int 
   198 ;; Registers used:
   199 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   200 ;; Tracked objects:
   201 ;;		On entry : 0/0
   202 ;;		On exit  : 0/0
   203 ;;		Unchanged: 0/0
   204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   209 ;;Total ram usage:        2 bytes
   210 ;; Hardware stack levels required when called:    3
   211 ;; This function calls:
   212 ;;		_Lcd_Clear
   213 ;;		_Lcd_Init
   214 ;;		_Lcd_Set_Cursor
   215 ;;		_Lcd_Write_String
   216 ;; This function is called by:
   217 ;;		Startup code after reset
   218 ;; This function uses a non-reentrant model
   219 ;;
   220                           
   221                           	psect	text0
   222  001024                     __ptext0:
   223                           	opt callstack 0
   224  001024                     _main:
   225                           	opt callstack 28
   226                           
   227                           ;LCD_test.c: 29:   unsigned int a;;LCD_test.c: 30:   ANSELD = 0x00;
   228                           
   229                           ;incstack = 0
   230  001024  0E00               	movlw	0
   231  001026  013A               	movlb	58	; () banked
   232  001028  6F70               	movwf	112,b	;volatile
   233                           
   234                           ;LCD_test.c: 31:   TRISD = 0x00;
   235  00102A  0E00               	movlw	0
   236  00102C  6EC5               	movwf	16325,c	;volatile
   237                           
   238                           ; BSR set to: 58
   239                           ;LCD_test.c: 33:   Lcd_Init();
   240  00102E  EC4A  F008         	call	_Lcd_Init	;wreg free
   241  001032                     l893:
   242                           
   243                           ;LCD_test.c: 35:   {;LCD_test.c: 36:     _delay((unsigned long)((2000)*(8000000/4000.0))
      +                          );
   244  001032  0E15               	movlw	21
   245  001034  6E0C               	movwf	(??_main+1)& (0+255),c
   246  001036  0E4B               	movlw	75
   247  001038  6E0B               	movwf	??_main& (0+255),c
   248  00103A  0EBE               	movlw	190
   249  00103C                     u117:
   250  00103C  2EE8               	decfsz	wreg,f,c
   251  00103E  D7FE               	bra	u117
   252  001040  2E0B               	decfsz	??_main& (0+255),f,c
   253  001042  D7FC               	bra	u117
   254  001044  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   255  001046  D7FA               	bra	u117
   256  001048  D000               	nop2	
   257                           
   258                           ;LCD_test.c: 37:     Lcd_Clear();
   259  00104A  EC1C  F009         	call	_Lcd_Clear	;wreg free
   260                           
   261                           ;LCD_test.c: 38:     Lcd_Set_Cursor(1,1);
   262  00104E  0E01               	movlw	1
   263  001050  6E04               	movwf	Lcd_Set_Cursor@b,c
   264  001052  0E01               	movlw	1
   265  001054  ECAB  F008         	call	_Lcd_Set_Cursor
   266                           
   267                           ;LCD_test.c: 39:     Lcd_Write_String(" T:23'C  PH:6.5 ");
   268  001058  0E01               	movlw	low STR_1
   269  00105A  6E05               	movwf	Lcd_Write_String@a,c
   270  00105C  0E10               	movlw	high STR_1
   271  00105E  6E06               	movwf	Lcd_Write_String@a+1,c
   272  001060  EC82  F008         	call	_Lcd_Write_String	;wreg free
   273                           
   274                           ;LCD_test.c: 40:     Lcd_Set_Cursor(2,1);
   275  001064  0E01               	movlw	1
   276  001066  6E04               	movwf	Lcd_Set_Cursor@b,c
   277  001068  0E02               	movlw	2
   278  00106A  ECAB  F008         	call	_Lcd_Set_Cursor
   279                           
   280                           ;LCD_test.c: 41:     Lcd_Write_String("Date: 2 days old");
   281  00106E  0E12               	movlw	low STR_2
   282  001070  6E05               	movwf	Lcd_Write_String@a,c
   283  001072  0E10               	movlw	high STR_2
   284  001074  6E06               	movwf	Lcd_Write_String@a+1,c
   285  001076  EC82  F008         	call	_Lcd_Write_String	;wreg free
   286                           
   287                           ;LCD_test.c: 42:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   288  00107A  0E15               	movlw	21
   289  00107C  6E0C               	movwf	(??_main+1)& (0+255),c
   290  00107E  0E4B               	movlw	75
   291  001080  6E0B               	movwf	??_main& (0+255),c
   292  001082  0EBE               	movlw	190
   293  001084                     u127:
   294  001084  2EE8               	decfsz	wreg,f,c
   295  001086  D7FE               	bra	u127
   296  001088  2E0B               	decfsz	??_main& (0+255),f,c
   297  00108A  D7FC               	bra	u127
   298  00108C  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   299  00108E  D7FA               	bra	u127
   300  001090  D000               	nop2	
   301  001092  D7CF               	goto	l893
   302  001094                     __end_of_main:
   303                           	opt callstack 0
   304                           
   305 ;; *************** function _Lcd_Write_String *****************
   306 ;; Defined at:
   307 ;;		line 98 in file "./lcd.h"
   308 ;; Parameters:    Size  Location     Type
   309 ;;  a               2    4[COMRAM] PTR unsigned char 
   310 ;;		 -> STR_2(17), STR_1(17), 
   311 ;; Auto vars:     Size  Location     Type
   312 ;;  i               2    8[COMRAM] int 
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : 0/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   325 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   326 ;;Total ram usage:        6 bytes
   327 ;; Hardware stack levels used:    1
   328 ;; Hardware stack levels required when called:    2
   329 ;; This function calls:
   330 ;;		_Lcd_Write_Char
   331 ;; This function is called by:
   332 ;;		_main
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336                           	psect	text1
   337  001104                     __ptext1:
   338                           	opt callstack 0
   339  001104                     _Lcd_Write_String:
   340                           	opt callstack 28
   341                           
   342                           ;./lcd.h: 98: void Lcd_Write_String(char *a);./lcd.h: 99: {;./lcd.h: 100:  int i;;./lcd.
      +                          h: 101:  for(i=0;a[i]!='\0';i++)
   343                           
   344                           ;incstack = 0
   345  001104  0E00               	movlw	0
   346  001106  6E0A               	movwf	Lcd_Write_String@i+1,c
   347  001108  0E00               	movlw	0
   348  00110A  6E09               	movwf	Lcd_Write_String@i,c
   349  00110C  D012               	goto	l887
   350  00110E                     l883:
   351                           
   352                           ;./lcd.h: 102:     Lcd_Write_Char(a[i]);
   353  00110E  5009               	movf	Lcd_Write_String@i,w,c
   354  001110  2405               	addwf	Lcd_Write_String@a,w,c
   355  001112  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   356  001114  500A               	movf	Lcd_Write_String@i+1,w,c
   357  001116  2006               	addwfc	Lcd_Write_String@a+1,w,c
   358  001118  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   359  00111A  0060  F01F  FFF6   	movff	??_Lcd_Write_String,tblptrl
   360  001120  0060  F023  FFF7   	movff	??_Lcd_Write_String+1,tblptrh
   361  001126                     	if	0	;tblptru may be non-zero
   362  001126                     	endif
   363  001126                     	if	0	;tblptru may be non-zero
   364  001126                     	endif
   365  001126  0008               	tblrd		*
   366  001128  50F5               	movf	tablat,w,c
   367  00112A  ECD3  F008         	call	_Lcd_Write_Char
   368  00112E  4A09               	infsnz	Lcd_Write_String@i,f,c
   369  001130  2A0A               	incf	Lcd_Write_String@i+1,f,c
   370  001132                     l887:
   371  001132  5009               	movf	Lcd_Write_String@i,w,c
   372  001134  2405               	addwf	Lcd_Write_String@a,w,c
   373  001136  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   374  001138  500A               	movf	Lcd_Write_String@i+1,w,c
   375  00113A  2006               	addwfc	Lcd_Write_String@a+1,w,c
   376  00113C  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   377  00113E  0060  F01F  FFF6   	movff	??_Lcd_Write_String,tblptrl
   378  001144  0060  F023  FFF7   	movff	??_Lcd_Write_String+1,tblptrh
   379  00114A                     	if	0	;tblptru may be non-zero
   380  00114A                     	endif
   381  00114A                     	if	0	;tblptru may be non-zero
   382  00114A                     	endif
   383  00114A  0008               	tblrd		*
   384  00114C  50F5               	movf	tablat,w,c
   385  00114E  0900               	iorlw	0
   386  001150  B4D8               	btfsc	status,2,c
   387  001152  0012               	return	
   388  001154  D7DC               	goto	l883
   389  001156                     __end_of_Lcd_Write_String:
   390                           	opt callstack 0
   391                           
   392 ;; *************** function _Lcd_Write_Char *****************
   393 ;; Defined at:
   394 ;;		line 82 in file "./lcd.h"
   395 ;; Parameters:    Size  Location     Type
   396 ;;  a               1    wreg     unsigned char 
   397 ;; Auto vars:     Size  Location     Type
   398 ;;  a               1    3[COMRAM] unsigned char 
   399 ;;  y               1    2[COMRAM] unsigned char 
   400 ;;  temp            1    1[COMRAM] unsigned char 
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		wreg, status,2, status,0, cstack
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   411 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   413 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   414 ;;Total ram usage:        3 bytes
   415 ;; Hardware stack levels used:    1
   416 ;; Hardware stack levels required when called:    1
   417 ;; This function calls:
   418 ;;		_Lcd_Port
   419 ;; This function is called by:
   420 ;;		_Lcd_Write_String
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           	psect	text2
   425  0011A6                     __ptext2:
   426                           	opt callstack 0
   427  0011A6                     _Lcd_Write_Char:
   428                           	opt callstack 28
   429                           
   430                           ;incstack = 0
   431                           ;Lcd_Write_Char@a stored from wreg
   432  0011A6  6E04               	movwf	Lcd_Write_Char@a,c
   433                           
   434                           ;./lcd.h: 82: void Lcd_Write_Char(char a);./lcd.h: 83: {;./lcd.h: 84:    char temp,y;;./
      +                          lcd.h: 85:    temp = a&0x0F;
   435  0011A8  5004               	movf	Lcd_Write_Char@a,w,c
   436  0011AA  0B0F               	andlw	15
   437  0011AC  6E02               	movwf	Lcd_Write_Char@temp,c
   438                           
   439                           ;./lcd.h: 86:    y = a&0xF0;
   440  0011AE  5004               	movf	Lcd_Write_Char@a,w,c
   441  0011B0  0BF0               	andlw	240
   442  0011B2  6E03               	movwf	Lcd_Write_Char@y,c
   443                           
   444                           ;./lcd.h: 87:    RD2 = 1;
   445  0011B4  84CD               	bsf	16333,2,c	;volatile
   446                           
   447                           ;./lcd.h: 88:    Lcd_Port(y>>4);
   448  0011B6  3803               	swapf	Lcd_Write_Char@y,w,c
   449  0011B8  0B0F               	andlw	15
   450  0011BA  ECEF  F008         	call	_Lcd_Port
   451                           
   452                           ;./lcd.h: 89:    RD3 = 1;
   453  0011BE  86CD               	bsf	16333,3,c	;volatile
   454                           
   455                           ;./lcd.h: 90:    _delay((unsigned long)((40)*(8000000/4000000.0)));
   456  0011C0  0E1A               	movlw	26
   457  0011C2                     u137:
   458  0011C2  2EE8               	decfsz	wreg,f,c
   459  0011C4  D7FE               	bra	u137
   460  0011C6  D000               	nop2	
   461                           
   462                           ;./lcd.h: 91:    RD3 = 0;
   463  0011C8  96CD               	bcf	16333,3,c	;volatile
   464                           
   465                           ;./lcd.h: 92:    Lcd_Port(temp);
   466  0011CA  5002               	movf	Lcd_Write_Char@temp,w,c
   467  0011CC  ECEF  F008         	call	_Lcd_Port
   468                           
   469                           ;./lcd.h: 93:    RD3 = 1;
   470  0011D0  86CD               	bsf	16333,3,c	;volatile
   471                           
   472                           ;./lcd.h: 94:    _delay((unsigned long)((40)*(8000000/4000000.0)));
   473  0011D2  0E1A               	movlw	26
   474  0011D4                     u147:
   475  0011D4  2EE8               	decfsz	wreg,f,c
   476  0011D6  D7FE               	bra	u147
   477  0011D8  D000               	nop2	
   478                           
   479                           ;./lcd.h: 95:    RD3 = 0;
   480  0011DA  96CD               	bcf	16333,3,c	;volatile
   481  0011DC  0012               	return		;funcret
   482  0011DE                     __end_of_Lcd_Write_Char:
   483                           	opt callstack 0
   484                           
   485 ;; *************** function _Lcd_Set_Cursor *****************
   486 ;; Defined at:
   487 ;;		line 42 in file "./lcd.h"
   488 ;; Parameters:    Size  Location     Type
   489 ;;  a               1    wreg     unsigned char 
   490 ;;  b               1    3[COMRAM] unsigned char 
   491 ;; Auto vars:     Size  Location     Type
   492 ;;  a               1    4[COMRAM] unsigned char 
   493 ;;  temp            1    7[COMRAM] unsigned char 
   494 ;;  y               1    6[COMRAM] unsigned char 
   495 ;;  z               1    5[COMRAM] unsigned char 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, status,2, status,0, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   505 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   508 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;Total ram usage:        5 bytes
   510 ;; Hardware stack levels used:    1
   511 ;; Hardware stack levels required when called:    2
   512 ;; This function calls:
   513 ;;		_Lcd_Cmd
   514 ;; This function is called by:
   515 ;;		_main
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text3
   520  001156                     __ptext3:
   521                           	opt callstack 0
   522  001156                     _Lcd_Set_Cursor:
   523                           	opt callstack 28
   524                           
   525                           ;incstack = 0
   526                           ;Lcd_Set_Cursor@a stored from wreg
   527  001156  6E05               	movwf	Lcd_Set_Cursor@a,c
   528                           
   529                           ;./lcd.h: 42: void Lcd_Set_Cursor(char a, char b);./lcd.h: 43: {;./lcd.h: 44:  char temp
      +                          ,z,y;;./lcd.h: 45:  if(a == 1)
   530  001158  0405               	decf	Lcd_Set_Cursor@a,w,c
   531  00115A  A4D8               	btfss	status,2,c
   532  00115C  D010               	goto	l873
   533                           
   534                           ;./lcd.h: 46:  {;./lcd.h: 47:    temp = 0x80 + b - 1;
   535  00115E  5004               	movf	Lcd_Set_Cursor@b,w,c
   536  001160  0F7F               	addlw	127
   537  001162  6E08               	movwf	Lcd_Set_Cursor@temp,c
   538                           
   539                           ;./lcd.h: 48:   z = temp>>4;
   540  001164  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   541  001166  0B0F               	andlw	15
   542  001168  6E06               	movwf	Lcd_Set_Cursor@z,c
   543                           
   544                           ;./lcd.h: 49:   y = temp & 0x0F;
   545  00116A  5008               	movf	Lcd_Set_Cursor@temp,w,c
   546  00116C  0B0F               	andlw	15
   547  00116E  6E07               	movwf	Lcd_Set_Cursor@y,c
   548                           
   549                           ;./lcd.h: 50:   Lcd_Cmd(z);
   550  001170  5006               	movf	Lcd_Set_Cursor@z,w,c
   551  001172  EC05  F009         	call	_Lcd_Cmd
   552                           
   553                           ;./lcd.h: 51:   Lcd_Cmd(y);
   554  001176  5007               	movf	Lcd_Set_Cursor@y,w,c
   555  001178  EC05  F009         	call	_Lcd_Cmd
   556                           
   557                           ;./lcd.h: 52:  }
   558  00117C  0012               	return	
   559  00117E                     l873:
   560  00117E  0E02               	movlw	2
   561  001180  1805               	xorwf	Lcd_Set_Cursor@a,w,c
   562  001182  A4D8               	btfss	status,2,c
   563  001184  0012               	return	
   564                           
   565                           ;./lcd.h: 54:  {;./lcd.h: 55:   temp = 0xC0 + b - 1;
   566  001186  5004               	movf	Lcd_Set_Cursor@b,w,c
   567  001188  0FBF               	addlw	191
   568  00118A  6E08               	movwf	Lcd_Set_Cursor@temp,c
   569                           
   570                           ;./lcd.h: 56:   z = temp>>4;
   571  00118C  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   572  00118E  0B0F               	andlw	15
   573  001190  6E06               	movwf	Lcd_Set_Cursor@z,c
   574                           
   575                           ;./lcd.h: 57:   y = temp & 0x0F;
   576  001192  5008               	movf	Lcd_Set_Cursor@temp,w,c
   577  001194  0B0F               	andlw	15
   578  001196  6E07               	movwf	Lcd_Set_Cursor@y,c
   579                           
   580                           ;./lcd.h: 58:   Lcd_Cmd(z);
   581  001198  5006               	movf	Lcd_Set_Cursor@z,w,c
   582  00119A  EC05  F009         	call	_Lcd_Cmd
   583                           
   584                           ;./lcd.h: 59:   Lcd_Cmd(y);
   585  00119E  5007               	movf	Lcd_Set_Cursor@y,w,c
   586  0011A0  EC05  F009         	call	_Lcd_Cmd
   587  0011A4  0012               	return		;funcret
   588  0011A6                     __end_of_Lcd_Set_Cursor:
   589                           	opt callstack 0
   590                           
   591 ;; *************** function _Lcd_Init *****************
   592 ;; Defined at:
   593 ;;		line 63 in file "./lcd.h"
   594 ;; Parameters:    Size  Location     Type
   595 ;;		None
   596 ;; Auto vars:     Size  Location     Type
   597 ;;		None
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		wreg, status,2, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   610 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   611 ;;Total ram usage:        1 bytes
   612 ;; Hardware stack levels used:    1
   613 ;; Hardware stack levels required when called:    2
   614 ;; This function calls:
   615 ;;		_Lcd_Cmd
   616 ;;		_Lcd_Port
   617 ;; This function is called by:
   618 ;;		_main
   619 ;; This function uses a non-reentrant model
   620 ;;
   621                           
   622                           	psect	text4
   623  001094                     __ptext4:
   624                           	opt callstack 0
   625  001094                     _Lcd_Init:
   626                           	opt callstack 28
   627                           
   628                           ;./lcd.h: 65:   Lcd_Port(0x00);
   629                           
   630                           ;incstack = 0
   631  001094  0E00               	movlw	0
   632  001096  ECEF  F008         	call	_Lcd_Port
   633                           
   634                           ;./lcd.h: 66:    _delay((unsigned long)((20)*(8000000/4000.0)));
   635  00109A  0E34               	movlw	52
   636  00109C  6E04               	movwf	??_Lcd_Init& (0+255),c
   637  00109E  0EF2               	movlw	242
   638  0010A0                     u157:
   639  0010A0  2EE8               	decfsz	wreg,f,c
   640  0010A2  D7FE               	bra	u157
   641  0010A4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   642  0010A6  D7FC               	bra	u157
   643                           
   644                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
   645  0010A8  0E03               	movlw	3
   646  0010AA  EC05  F009         	call	_Lcd_Cmd
   647                           
   648                           ;./lcd.h: 68:  _delay((unsigned long)((5)*(8000000/4000.0)));
   649  0010AE  0E0D               	movlw	13
   650  0010B0  6E04               	movwf	??_Lcd_Init& (0+255),c
   651  0010B2  0EFC               	movlw	252
   652  0010B4                     u167:
   653  0010B4  2EE8               	decfsz	wreg,f,c
   654  0010B6  D7FE               	bra	u167
   655  0010B8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   656  0010BA  D7FC               	bra	u167
   657                           
   658                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
   659  0010BC  0E03               	movlw	3
   660  0010BE  EC05  F009         	call	_Lcd_Cmd
   661                           
   662                           ;./lcd.h: 70:  _delay((unsigned long)((11)*(8000000/4000.0)));
   663  0010C2  0E1D               	movlw	29
   664  0010C4  6E04               	movwf	??_Lcd_Init& (0+255),c
   665  0010C6  0E91               	movlw	145
   666  0010C8                     u177:
   667  0010C8  2EE8               	decfsz	wreg,f,c
   668  0010CA  D7FE               	bra	u177
   669  0010CC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   670  0010CE  D7FC               	bra	u177
   671  0010D0  F000               	nop	
   672                           
   673                           ;./lcd.h: 71:   Lcd_Cmd(0x03);
   674  0010D2  0E03               	movlw	3
   675  0010D4  EC05  F009         	call	_Lcd_Cmd
   676                           
   677                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
   678  0010D8  0E02               	movlw	2
   679  0010DA  EC05  F009         	call	_Lcd_Cmd
   680                           
   681                           ;./lcd.h: 74:   Lcd_Cmd(0x02);
   682  0010DE  0E02               	movlw	2
   683  0010E0  EC05  F009         	call	_Lcd_Cmd
   684                           
   685                           ;./lcd.h: 75:   Lcd_Cmd(0x08);
   686  0010E4  0E08               	movlw	8
   687  0010E6  EC05  F009         	call	_Lcd_Cmd
   688                           
   689                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
   690  0010EA  0E00               	movlw	0
   691  0010EC  EC05  F009         	call	_Lcd_Cmd
   692                           
   693                           ;./lcd.h: 77:   Lcd_Cmd(0x0C);
   694  0010F0  0E0C               	movlw	12
   695  0010F2  EC05  F009         	call	_Lcd_Cmd
   696                           
   697                           ;./lcd.h: 78:   Lcd_Cmd(0x00);
   698  0010F6  0E00               	movlw	0
   699  0010F8  EC05  F009         	call	_Lcd_Cmd
   700                           
   701                           ;./lcd.h: 79:   Lcd_Cmd(0x06);
   702  0010FC  0E06               	movlw	6
   703  0010FE  EC05  F009         	call	_Lcd_Cmd
   704  001102  0012               	return		;funcret
   705  001104                     __end_of_Lcd_Init:
   706                           	opt callstack 0
   707                           
   708 ;; *************** function _Lcd_Clear *****************
   709 ;; Defined at:
   710 ;;		line 36 in file "./lcd.h"
   711 ;; Parameters:    Size  Location     Type
   712 ;;		None
   713 ;; Auto vars:     Size  Location     Type
   714 ;;		None
   715 ;; Return value:  Size  Location     Type
   716 ;;                  1    wreg      void 
   717 ;; Registers used:
   718 ;;		wreg, status,2, cstack
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   728 ;;Total ram usage:        0 bytes
   729 ;; Hardware stack levels used:    1
   730 ;; Hardware stack levels required when called:    2
   731 ;; This function calls:
   732 ;;		_Lcd_Cmd
   733 ;; This function is called by:
   734 ;;		_main
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text5
   739  001238                     __ptext5:
   740                           	opt callstack 0
   741  001238                     _Lcd_Clear:
   742                           	opt callstack 28
   743                           
   744                           ;./lcd.h: 38:  Lcd_Cmd(0);
   745                           
   746                           ;incstack = 0
   747  001238  0E00               	movlw	0
   748  00123A  EC05  F009         	call	_Lcd_Cmd
   749                           
   750                           ;./lcd.h: 39:  Lcd_Cmd(1);
   751  00123E  0E01               	movlw	1
   752  001240  EC05  F009         	call	_Lcd_Cmd
   753  001244  0012               	return		;funcret
   754  001246                     __end_of_Lcd_Clear:
   755                           	opt callstack 0
   756                           
   757 ;; *************** function _Lcd_Cmd *****************
   758 ;; Defined at:
   759 ;;		line 27 in file "./lcd.h"
   760 ;; Parameters:    Size  Location     Type
   761 ;;  a               1    wreg     unsigned char 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  a               1    2[COMRAM] unsigned char 
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, status,2, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   775 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   776 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   777 ;;Total ram usage:        2 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    1
   780 ;; This function calls:
   781 ;;		_Lcd_Port
   782 ;; This function is called by:
   783 ;;		_Lcd_Clear
   784 ;;		_Lcd_Set_Cursor
   785 ;;		_Lcd_Init
   786 ;;		_Lcd_Shift_Right
   787 ;;		_Lcd_Shift_Left
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           	psect	text6
   792  00120A                     __ptext6:
   793                           	opt callstack 0
   794  00120A                     _Lcd_Cmd:
   795                           	opt callstack 28
   796                           
   797                           ;incstack = 0
   798                           ;Lcd_Cmd@a stored from wreg
   799  00120A  6E03               	movwf	Lcd_Cmd@a,c
   800                           
   801                           ;./lcd.h: 27: void Lcd_Cmd(char a);./lcd.h: 28: {;./lcd.h: 29:  RD2 = 0;
   802  00120C  94CD               	bcf	16333,2,c	;volatile
   803                           
   804                           ;./lcd.h: 30:  Lcd_Port(a);
   805  00120E  5003               	movf	Lcd_Cmd@a,w,c
   806  001210  ECEF  F008         	call	_Lcd_Port
   807                           
   808                           ;./lcd.h: 31:  RD3 = 1;
   809  001214  86CD               	bsf	16333,3,c	;volatile
   810                           
   811                           ;./lcd.h: 32:         _delay((unsigned long)((4)*(8000000/4000.0)));
   812  001216  0E0B               	movlw	11
   813  001218  6E02               	movwf	??_Lcd_Cmd& (0+255),c
   814  00121A  0E62               	movlw	98
   815  00121C                     u187:
   816  00121C  2EE8               	decfsz	wreg,f,c
   817  00121E  D7FE               	bra	u187
   818  001220  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
   819  001222  D7FC               	bra	u187
   820  001224  D000               	nop2	
   821                           
   822                           ;./lcd.h: 33:         RD3 = 0;
   823  001226  96CD               	bcf	16333,3,c	;volatile
   824  001228  0012               	return		;funcret
   825  00122A                     __end_of_Lcd_Cmd:
   826                           	opt callstack 0
   827                           
   828 ;; *************** function _Lcd_Port *****************
   829 ;; Defined at:
   830 ;;		line 5 in file "./lcd.h"
   831 ;; Parameters:    Size  Location     Type
   832 ;;  a               1    wreg     unsigned char 
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  a               1    0[COMRAM] unsigned char 
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   848 ;;Total ram usage:        1 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; This function calls:
   851 ;;		Nothing
   852 ;; This function is called by:
   853 ;;		_Lcd_Cmd
   854 ;;		_Lcd_Init
   855 ;;		_Lcd_Write_Char
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text7
   860  0011DE                     __ptext7:
   861                           	opt callstack 0
   862  0011DE                     _Lcd_Port:
   863                           	opt callstack 28
   864                           
   865                           ;incstack = 0
   866                           ;Lcd_Port@a stored from wreg
   867  0011DE  6E01               	movwf	Lcd_Port@a,c
   868                           
   869                           ;./lcd.h: 5: void Lcd_Port(char a);./lcd.h: 6: {;./lcd.h: 7:  if(a & 1)
   870  0011E0  A001               	btfss	Lcd_Port@a,0,c
   871  0011E2  D002               	goto	l21
   872                           
   873                           ;./lcd.h: 8:   RD4 = 1;
   874  0011E4  88CD               	bsf	16333,4,c	;volatile
   875  0011E6  D001               	goto	l747
   876  0011E8                     l21:
   877                           
   878                           ;./lcd.h: 10:   RD4 = 0;
   879  0011E8  98CD               	bcf	16333,4,c	;volatile
   880  0011EA                     l747:
   881                           
   882                           ;./lcd.h: 12:  if(a & 2)
   883  0011EA  A201               	btfss	Lcd_Port@a,1,c
   884  0011EC  D002               	goto	l23
   885                           
   886                           ;./lcd.h: 13:   RD5 = 1;
   887  0011EE  8ACD               	bsf	16333,5,c	;volatile
   888  0011F0  D001               	goto	l751
   889  0011F2                     l23:
   890                           
   891                           ;./lcd.h: 15:   RD5 = 0;
   892  0011F2  9ACD               	bcf	16333,5,c	;volatile
   893  0011F4                     l751:
   894                           
   895                           ;./lcd.h: 17:  if(a & 4)
   896  0011F4  A401               	btfss	Lcd_Port@a,2,c
   897  0011F6  D002               	goto	l25
   898                           
   899                           ;./lcd.h: 18:   RD6 = 1;
   900  0011F8  8CCD               	bsf	16333,6,c	;volatile
   901  0011FA  D001               	goto	l755
   902  0011FC                     l25:
   903                           
   904                           ;./lcd.h: 20:   RD6 = 0;
   905  0011FC  9CCD               	bcf	16333,6,c	;volatile
   906  0011FE                     l755:
   907                           
   908                           ;./lcd.h: 22:  if(a & 8)
   909  0011FE  A601               	btfss	Lcd_Port@a,3,c
   910  001200  D002               	goto	l27
   911                           
   912                           ;./lcd.h: 23:   RD7 = 1;
   913  001202  8ECD               	bsf	16333,7,c	;volatile
   914  001204  0012               	return	
   915  001206                     l27:
   916                           
   917                           ;./lcd.h: 25:   RD7 = 0;
   918  001206  9ECD               	bcf	16333,7,c	;volatile
   919  001208  0012               	return		;funcret
   920  00120A                     __end_of_Lcd_Port:
   921                           	opt callstack 0
   922                           
   923                           	psect	rparam
   924  0000                     tosu	equ	0x3FFF
   925                           tosh	equ	0x3FFE
   926                           tosl	equ	0x3FFD
   927                           stkptr	equ	0x3FFC
   928                           pclatu	equ	0x3FFB
   929                           pclath	equ	0x3FFA
   930                           pcl	equ	0x3FF9
   931                           tblptru	equ	0x3FF8
   932                           tblptrh	equ	0x3FF7
   933                           tblptrl	equ	0x3FF6
   934                           tablat	equ	0x3FF5
   935                           prodh	equ	0x3FF4
   936                           prodl	equ	0x3FF3
   937                           indf0	equ	0x3FEF
   938                           postinc0	equ	0x3FEE
   939                           postdec0	equ	0x3FED
   940                           preinc0	equ	0x3FEC
   941                           plusw0	equ	0x3FEB
   942                           fsr0h	equ	0x3FEA
   943                           fsr0l	equ	0x3FE9
   944                           wreg	equ	0x3FE8
   945                           indf1	equ	0x3FE7
   946                           postinc1	equ	0x3FE6
   947                           postdec1	equ	0x3FE5
   948                           preinc1	equ	0x3FE4
   949                           plusw1	equ	0x3FE3
   950                           fsr1h	equ	0x3FE2
   951                           fsr1l	equ	0x3FE1
   952                           bsr	equ	0x3FE0
   953                           indf2	equ	0x3FDF
   954                           postinc2	equ	0x3FDE
   955                           postdec2	equ	0x3FDD
   956                           preinc2	equ	0x3FDC
   957                           plusw2	equ	0x3FDB
   958                           fsr2h	equ	0x3FDA
   959                           fsr2l	equ	0x3FD9
   960                           status	equ	0x3FD8


Data Sizes:
    Strings     34
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      12
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1069
                                             10 COMRAM     2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     362
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     497
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      C       C       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BANK10             100      0       0      24        0.0%
BANK11             100      0       0      25        0.0%
BANK12             100      0       0      26        0.0%
BANK13             100      0       0      27        0.0%
BITBANK14          100      0       0      28        0.0%
BANK14             100      0       0      29        0.0%
BITBANK15          100      0       0      30        0.0%
BANK15             100      0       0      31        0.0%
ABS                  0      0       0      32        0.0%
BITBANK10          100      0       0      33        0.0%
BITBANK11          100      0       0      34        0.0%
BITBANK12          100      0       0      35        0.0%
BITBANK13          100      0       0      36        0.0%
BIGRAM             FFF      0       0      37        0.0%
BITSFR_8             0      0       0     200        0.0%
SFR_8                0      0       0     200        0.0%
BITSFR_7             0      0       0     200        0.0%
SFR_7                0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jul 25 15:41:17 2019

              __CFG_CP$OFF 000000                         l21 11E8                         l23 11F2  
                       l25 11FC                         l27 1206                __CFG_LVP$ON 000000  
                      l751 11F4                        l755 11FE                        l747 11EA  
                      l873 117E                        l883 110E                        l893 1032  
                      l887 1132                        _RD2 01FE6A                        _RD3 01FE6B  
                      _RD4 01FE6C                        _RD5 01FE6D                        _RD6 01FE6E  
                      _RD7 01FE6F                        u117 103C                        u127 1084  
                      u137 11C2                        u147 11D4                        u157 10A0  
                      u167 10B4                        u177 10C8                        u187 121C  
                      wreg 003FE8              __CFG_BBEN$OFF 000000               __CFG_ZCD$OFF 000000  
                     STR_1 1001                       STR_2 1012          ?_Lcd_Write_String 0005  
                     _main 1024                       start FFFC         ??_Lcd_Write_String 0007  
          __end_of_Lcd_Cmd 122A              __CFG_CSWEN$ON 000000               ___param_bank 000000  
                    ?_main 0001              __CFG_WDTE$OFF 000000             __CFG_DEBUG$OFF 000000  
  __size_of_Lcd_Set_Cursor 0050                      _TRISD 003FC5             __CFG_FCMEN$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
       __CFG_MCLRE$EXTMCLR 000000                      tablat 003FF5                      status 003FD8  
         __end_of_Lcd_Init 1104           __end_of_Lcd_Port 120A            __initialization 122A  
             __end_of_main 1094             __CFG_SAFEN$OFF 000000                     ??_main 000B  
           __CFG_PR1WAY$ON 000000         __size_of_Lcd_Clear 000E              __activetblptr 000001  
                   _ANSELD 003A70             __CFG_WDTCCS$SC 000000         __CFG_RSTOSC$EXTOSC 000000  
                ??_Lcd_Cmd 0002    __size_of_Lcd_Write_Char 0038             __CFG_XINST$OFF 000000  
           __CFG_STVREN$ON 000000               __mediumconst 0000                     tblptrh 003FF7  
                   tblptrl 003FF6                     tblptru 003FF8            Lcd_Set_Cursor@a 0005  
          Lcd_Set_Cursor@b 0004            Lcd_Set_Cursor@y 0007            Lcd_Set_Cursor@z 0006  
               __accesstop 0060    __end_of__initialization 122A            __CFG_FEXTOSC$HS 000000  
        __end_of_Lcd_Clear 1246              ___rparam_used 000001             __pcstackCOMRAM 0001  
           _Lcd_Set_Cursor 1156                  ?_Lcd_Init 0001                  ?_Lcd_Port 0001  
          __CFG_IVT1WAY$ON 000000            __CFG_MVECEN$OFF 000000            __CFG_PPS1WAY$ON 000000  
__size_of_Lcd_Write_String 0052     __end_of_Lcd_Set_Cursor 11A6        __CFG_PWRTS$PWRT_OFF 000000  
               ??_Lcd_Init 0004                 ??_Lcd_Port 0001             _Lcd_Write_Char 11A6  
                  _Lcd_Cmd 120A                    __Hparam 0000                    __Lparam 0000  
             __psmallconst 1000                    __pcinit 122A                    __ramtop 1000  
          ?_Lcd_Set_Cursor 0004                    __ptext0 1024                    __ptext1 1104  
                  __ptext2 11A6                    __ptext3 1156                    __ptext4 1094  
                  __ptext5 1238                    __ptext6 120A                    __ptext7 11DE  
          __CFG_WRTAPP$OFF 000000            __CFG_WRTSAF$OFF 000000     __end_of_Lcd_Write_Char 11DE  
     end_of_initialization 122A                  Lcd_Port@a 0001      __CFG_WDTCPS$WDTCPS_31 000000  
          ?_Lcd_Write_Char 0001          Lcd_Write_String@a 0005          Lcd_Write_String@i 0009  
                _Lcd_Clear 1238           _Lcd_Write_String 1104        start_initialization 122A  
        __size_of_Lcd_Init 0070          __size_of_Lcd_Port 002C           __CFG_LPBOREN$OFF 000000  
               ?_Lcd_Clear 0001            Lcd_Write_Char@a 0004            Lcd_Write_Char@y 0003  
                 ?_Lcd_Cmd 0001           ??_Lcd_Set_Cursor 0005     __CFG_BBSIZE$BBSIZE_512 000000  
              __smallconst 1000        __CFG_BORV$VBOR_2P45 000000                   Lcd_Cmd@a 0003  
              ??_Lcd_Clear 0004           ??_Lcd_Write_Char 0002                   _Lcd_Init 1094  
                 _Lcd_Port 11DE   __end_of_Lcd_Write_String 1156           __size_of_Lcd_Cmd 0020  
                 __Hrparam 0000                   __Lrparam 0000               __Lsmallconst 1000  
       __CFG_BOREN$SBORDIS 000000              __size_of_main 0070       __CFG_WDTCWS$WDTCWS_7 000000  
       Lcd_Write_Char@temp 0002          __CFG_CLKOUTEN$OFF 000000         Lcd_Set_Cursor@temp 0008  
